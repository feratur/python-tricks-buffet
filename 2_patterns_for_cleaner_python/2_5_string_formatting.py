#!/usr/bin/env python3
if __name__ == '__main__':
    errno = 50159747054
    name = 'Bob'

    # C-style printf format
    assert 'Hey %s, there is a 0x%x error!' % (name, errno) == 'Hey Bob, there is a 0xbadc0ffee error!'

    # Same
    print('Hey %(name)s, there is a 0x%(errno)x error!' % { "name": name, "errno": errno })

    # .format() style
    print('Hello, {}'.format(name))
    print('Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno))

    # Python 3.6+
    a = 5
    b = 10
    print(f'Hello, {name}!')
    print(f'Five plus ten is {a + b} and not {2 * (a + b)}.')
    print(f'Hey {name}, there is a 0x{errno:#x} error!')

    # Template Strings
    # template strings don’t allow format specifiers
    # the best use case for template strings is when
    # you’re handling format strings generated by users of your program
    from string import Template
    t = Template('Hey, $name!')
    print(t.substitute(name=name))

    # Example of injection that Template can avoid
    SECRET = 'this-is-a-secret'
    class Error:
        def __init__(self):
            pass
    err = Error()
    user_input = '{error.__init__.__globals__[SECRET]}'
    # Uh-oh...
    print(user_input.format(error=err))
